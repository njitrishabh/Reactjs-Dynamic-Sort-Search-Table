{"ast":null,"code":"var _jsxFileName = \"/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Pubmed.js\";\nimport React from 'react';\nimport Tablexml from './Tablexml';\nimport { parseString } from 'xml2js';\n\nclass Pubmed extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addTableRowsFromXmlDoc = function (xmlNodes, tableNode) {\n      var theTable = tableNode.parentNode;\n      var newRow, newCell, i, j;\n      console.log(\"Number of nodes: \" + xmlNodes.length);\n\n      for (i = 0; i < xmlNodes.length; i++) {\n        newRow = tableNode.insertRow(i);\n        newRow.className = i % 2 ? \"OddRow\" : \"EvenRow\";\n\n        for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n          newCell = newRow.insertCell(newRow.cells.length);\n\n          if (xmlNodes[i].childNodes[j].firstChild) {\n            newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n          } else {\n            newCell.innerHTML = \"-\";\n          }\n\n          console.log(\"cell: \" + newCell);\n        }\n      }\n\n      theTable.appendChild(tableNode);\n    };\n\n    this.showResult = function (xmlDoc) {\n      // this.removeWhitespace(xmlDoc);\n      var outputResult = document.getElementById(\"BodyRows\");\n      var rowData = xmlDoc.getElementsByTagName(\"Item\");\n      this.addTableRowsFromXmlDoc(rowData, outputResult);\n    };\n\n    this.state = {\n      items: '',\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:9000/pubmed').then(res => this.setState({\n      isLoaded: true,\n      items: res\n    }));\n  } // removeWhitespace = function (xml) {\n  //     console.log(xml, 'docxml');\n  //     var loopIndex;\n  //     for (loopIndex = 0; loopIndex < xml.childNodes.length; loopIndex++) {\n  //         var currentNode = xml.childNodes[loopIndex];\n  //         if (currentNode.nodeType == 1) {\n  //             this.removeWhitespace(currentNode);\n  //         }\n  //         if (!(/\\S/.test(currentNode.nodeValue)) && (currentNode.nodeType == 3)) {\n  //             xml.removeChild(xml.childNodes[loopIndex--]);\n  //         }\n  //     }\n  // }\n\n\n  render() {\n    var isLoaded = this.state.isLoaded;\n    var items = this.state.items;\n\n    if (items != '') {\n      this.showResult(this.state.items);\n    }\n\n    if (!isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 20\n        }\n      }, \"Loading...\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"table\", {\n        id: \"MainTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        id: \"BodyRows\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      })) // <div className=\"App\">\n      //     <Tablexml data={items} />\n      // </div>\n      ;\n    }\n  }\n\n}\n\nexport default Pubmed;","map":{"version":3,"sources":["/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Pubmed.js"],"names":["React","Tablexml","parseString","Pubmed","Component","constructor","props","addTableRowsFromXmlDoc","xmlNodes","tableNode","theTable","parentNode","newRow","newCell","i","j","console","log","length","insertRow","className","childNodes","insertCell","cells","firstChild","innerHTML","nodeValue","appendChild","showResult","xmlDoc","outputResult","document","getElementById","rowData","getElementsByTagName","state","items","isLoaded","componentDidMount","fetch","then","res","setState","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tablexml from './Tablexml';\nimport { parseString } from 'xml2js';\n\nclass Pubmed extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: '',\n            isLoaded: false,\n        };\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:9000/pubmed')\n            .then(res => this.setState({\n                isLoaded: true,\n                items: res,\n            }));\n\n    }\n\n    // removeWhitespace = function (xml) {\n    //     console.log(xml, 'docxml');\n    //     var loopIndex;\n    //     for (loopIndex = 0; loopIndex < xml.childNodes.length; loopIndex++) {\n    //         var currentNode = xml.childNodes[loopIndex];\n    //         if (currentNode.nodeType == 1) {\n    //             this.removeWhitespace(currentNode);\n    //         }\n    //         if (!(/\\S/.test(currentNode.nodeValue)) && (currentNode.nodeType == 3)) {\n    //             xml.removeChild(xml.childNodes[loopIndex--]);\n    //         }\n    //     }\n    // }\n\n    addTableRowsFromXmlDoc = function (xmlNodes, tableNode) {\n        var theTable = tableNode.parentNode;\n        var newRow, newCell, i, j;\n        console.log(\"Number of nodes: \" + xmlNodes.length);\n        for (i = 0; i < xmlNodes.length; i++) {\n            newRow = tableNode.insertRow(i);\n            newRow.className = (i % 2) ? \"OddRow\" : \"EvenRow\";\n            for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n                newCell = newRow.insertCell(newRow.cells.length);\n                if (xmlNodes[i].childNodes[j].firstChild) {\n                    newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n                } else {\n                    newCell.innerHTML = \"-\";\n                }\n                console.log(\"cell: \" + newCell);\n            }\n        }\n        theTable.appendChild(tableNode);\n    }\n\n    showResult = function (xmlDoc) {\n        // this.removeWhitespace(xmlDoc);\n        var outputResult = document.getElementById(\"BodyRows\");\n        var rowData = xmlDoc.getElementsByTagName(\"Item\");\n\n        this.addTableRowsFromXmlDoc(rowData, outputResult);\n    }\n\n    render() {\n\n        var isLoaded = this.state.isLoaded;\n        var items = this.state.items;\n        if (items != '') {\n            this.showResult(this.state.items);\n        }\n\n\n\n        if (!isLoaded) {\n            return <div>Loading...</div>;\n        }\n\n        else {\n            return (\n                <table id=\"MainTable\">\n                    <tbody id=\"BodyRows\"></tbody>\n                </table>\n                // <div className=\"App\">\n                //     <Tablexml data={items} />\n                // </div>\n            )\n\n        }\n\n    }\n}\nexport default Pubmed;"]},"metadata":{},"sourceType":"module"}