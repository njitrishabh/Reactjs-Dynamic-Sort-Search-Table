{"ast":null,"code":"var _jsxFileName = \"/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx\";\nimport React, { Component } from 'react';\n\nclass Tablexml extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addTableRowsFromXmlDoc = function (xmlNodes, tableNode) {\n      console.log(tableNode, 'table');\n      var theTable = tableNode.parentNode;\n      var newRow, newCell, i, j;\n      console.log(\"Number of nodes: \" + xmlNodes.length);\n\n      for (i = 0; i < xmlNodes.length; i++) {\n        newRow = tableNode.insertRow(i);\n        newRow.className = i % 2 ? \"OddRow\" : \"EvenRow\";\n\n        for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n          newCell = newRow.insertCell(newRow.cells.length);\n\n          if (xmlNodes[i].childNodes[j].firstChild) {\n            newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n          } else {\n            newCell.innerHTML = \"-\";\n          }\n\n          console.log(\"cell: \" + newCell);\n        }\n      }\n\n      theTable.appendChild(tableNode);\n    };\n\n    this.showResult = function (xmlDoc) {\n      // this.removeWhitespace(xmlDoc);\n      const r = /*#__PURE__*/React.createElement(\"tbody\", {\n        id: \"BodyRows\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 19\n        }\n      });\n      var outputResult = document.getElementById(\"BodyRows\");\n      console.log(outputResult, 'output');\n      let rows = [];\n      var xmlNodes = xmlDoc.getElementsByTagName(\"Item\");\n      var newRow, newCell, i, j;\n\n      for (i = 0; i < xmlNodes.length; i++) {\n        let rowID = `row${i}`;\n        let cell = [];\n\n        for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n          newCell = newRow.insertCell(newRow.cells.length);\n          let cellID = `cell${i}-${j}`;\n\n          if (xmlNodes[i].childNodes[j].firstChild) {\n            cell.push( /*#__PURE__*/React.createElement(\"td\", {\n              key: cellID,\n              id: cellID,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 31\n              }\n            }, xmlNodes[i].childNodes[j].firstChild.nodeValue));\n          } else {\n            cell.push( /*#__PURE__*/React.createElement(\"td\", {\n              key: cellID,\n              id: cellID,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 31\n              }\n            }, \"-\"));\n          }\n        }\n\n        rows.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: i,\n          id: rowID,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 23\n          }\n        }, cell));\n      }\n    };\n\n    this.state = {\n      data: this.props.data\n    };\n    this.showResult = this.showResult.bind(this);\n    this.addTableRowsFromXmlDoc = this.addTableRowsFromXmlDoc.bind(this); // this.getKeys = this.getKeys.bind(this);\n    // this.onSort = this.onSort.bind(this);\n    // this.handleChange = this.handleChange.bind(this);\n  } // removeWhitespace = function (xml) {\n  //     console.log(xml, 'docxml');\n  //     var loopIndex;\n  //     for (loopIndex = 0; loopIndex < xml.childNodes.length; loopIndex++) {\n  //         var currentNode = xml.childNodes[loopIndex];\n  //         if (currentNode.nodeType == 1) {\n  //             this.removeWhitespace(currentNode);\n  //         }\n  //         if (!(/\\S/.test(currentNode.nodeValue)) && (currentNode.nodeType == 3)) {\n  //             xml.removeChild(xml.childNodes[loopIndex--]);\n  //         }\n  //     }\n  // }\n\n\n  render() {\n    var newdata = this.state.data;\n    return /*#__PURE__*/React.createElement(\"table\", {\n      id: \"MainTable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, this.showResult(newdata));\n  }\n\n}\n\nexport default Tablexml;","map":{"version":3,"sources":["/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx"],"names":["React","Component","Tablexml","constructor","props","addTableRowsFromXmlDoc","xmlNodes","tableNode","console","log","theTable","parentNode","newRow","newCell","i","j","length","insertRow","className","childNodes","insertCell","cells","firstChild","innerHTML","nodeValue","appendChild","showResult","xmlDoc","r","outputResult","document","getElementById","rows","getElementsByTagName","rowID","cell","cellID","push","state","data","bind","render","newdata"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Tablexml extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data,\n        };\n\n        this.showResult = this.showResult.bind(this);\n        this.addTableRowsFromXmlDoc = this.addTableRowsFromXmlDoc.bind(this);\n        // this.getKeys = this.getKeys.bind(this);\n        // this.onSort = this.onSort.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    // removeWhitespace = function (xml) {\n    //     console.log(xml, 'docxml');\n    //     var loopIndex;\n    //     for (loopIndex = 0; loopIndex < xml.childNodes.length; loopIndex++) {\n    //         var currentNode = xml.childNodes[loopIndex];\n    //         if (currentNode.nodeType == 1) {\n    //             this.removeWhitespace(currentNode);\n    //         }\n    //         if (!(/\\S/.test(currentNode.nodeValue)) && (currentNode.nodeType == 3)) {\n    //             xml.removeChild(xml.childNodes[loopIndex--]);\n    //         }\n    //     }\n    // }\n\n    addTableRowsFromXmlDoc = function (xmlNodes, tableNode) {\n        console.log(tableNode, 'table');\n        var theTable = tableNode.parentNode;\n        var newRow, newCell, i, j;\n        console.log(\"Number of nodes: \" + xmlNodes.length);\n        for (i = 0; i < xmlNodes.length; i++) {\n            newRow = tableNode.insertRow(i);\n            newRow.className = (i % 2) ? \"OddRow\" : \"EvenRow\";\n            for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n                newCell = newRow.insertCell(newRow.cells.length);\n                if (xmlNodes[i].childNodes[j].firstChild) {\n                    newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n                } else {\n                    newCell.innerHTML = \"-\";\n                }\n                console.log(\"cell: \" + newCell);\n            }\n        }\n        theTable.appendChild(tableNode);\n    }\n\n    showResult = function (xmlDoc) {\n        // this.removeWhitespace(xmlDoc);\n        const r = <tbody id=\"BodyRows\"></tbody>\n        var outputResult = document.getElementById(\"BodyRows\");\n        console.log(outputResult, 'output');\n\n\n        let rows = [];\n        var xmlNodes = xmlDoc.getElementsByTagName(\"Item\");\n        var newRow, newCell, i, j;\n        for (i = 0; i < xmlNodes.length; i++) {\n            let rowID = `row${i}`;\n            let cell = [];\n            for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n                newCell = newRow.insertCell(newRow.cells.length);\n                let cellID = `cell${i}-${j}`;\n                if (xmlNodes[i].childNodes[j].firstChild) {\n                    cell.push(<td key={cellID} id={cellID}>{xmlNodes[i].childNodes[j].firstChild.nodeValue}</td>)\n                } else {\n                    cell.push(<td key={cellID} id={cellID}>{\"-\"}</td>)\n                }\n            }\n            rows.push(<tr key={i} id={rowID}>{cell}</tr>)\n        }\n\n\n\n    }\n\n    render() {\n        var newdata = this.state.data;\n\n        return (\n            <table id=\"MainTable\">\n                {this.showResult(newdata)}\n            </table>\n        );\n    }\n}\n\nexport default Tablexml;"]},"metadata":{},"sourceType":"module"}