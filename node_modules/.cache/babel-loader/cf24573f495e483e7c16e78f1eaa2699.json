{"ast":null,"code":"var _jsxFileName = \"/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx\";\nimport React, { Component } from 'react';\n\nclass Tablexml extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addTableRowsFromXmlDoc = function (xmlNodes, tableNode) {\n      console.log(tableNode, 'table'); // var theTable = tableNode.parentNode;\n      // var newRow, newCell, i, j;\n      // console.log(\"Number of nodes: \" + xmlNodes.length);\n      // for (i = 0; i < xmlNodes.length; i++) {\n      //     newRow = tableNode.insertRow(i);\n      //     newRow.className = (i % 2) ? \"OddRow\" : \"EvenRow\";\n      //     for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n      //         newCell = newRow.insertCell(newRow.cells.length);\n      //         if (xmlNodes[i].childNodes[j].firstChild) {\n      //             newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n      //         } else {\n      //             newCell.innerHTML = \"-\";\n      //         }\n      //         console.log(\"cell: \" + newCell);\n      //     }\n      // }\n      // theTable.appendChild(tableNode);\n    };\n\n    this.showResult = function (xmlDoc) {\n      // this.removeWhitespace(xmlDoc);\n      // const r = <tbody id=\"BodyRows\"></tbody>\n      // var outputResult = document.getElementById(\"BodyRows\");\n      // console.log(outputResult, 'output');\n      return /*#__PURE__*/React.createElement(\"tbody\", {\n        id: \"BodyRows\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }\n      }, this.addTableRowsFromXmlDoc(xmlDoc, document.getElementById(\"BodyRows\")) // for(i = 0; i <xmlNodes.length; {\n      // newRow = tableNode.insertRow(i);\n      //     newRow.className = (i % 2) ? \"OddRow\" : \"EvenRow\";\n      //     for (j = 0; j < xmlNodes[{\n      // newCell = newRow.insertCell(newRow.cells.length);\n      //         if (xmlNodes[i].childNodes[j].firstChild) {\n      // newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n      //         } else {\n      // newCell.innerHTML = \"-\";\n      //         }\n      //         console.log(\"cell: \" + newCell);\n      //     }\n      // }\n      // theTable.appendChild(tableNode)\n      ); // let rows = [];\n      // var xmlNodes = xmlDoc.getElementsByTagName(\"Item\");\n      // var i, j;\n      // for (i = 0; i < xmlNodes.length; i++) {\n      //     let rowID = `row${i}`;\n      //     let cell = [];\n      //     for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n      //         let cellID = `cell${i}-${j}`;\n      //         if (xmlNodes[i].childNodes[j].firstChild) {\n      //             cell.push(<td key={cellID} id={cellID}>{xmlNodes[i].childNodes[j].firstChild.nodeValue}</td>)\n      //         }\n      //     }\n      //     rows.push(<tr key={i} id={rowID}>{cell}</tr>)\n      // }\n      // return rows;\n    };\n\n    this.state = {\n      data: this.props.data\n    };\n    this.showResult = this.showResult.bind(this);\n    this.addTableRowsFromXmlDoc = this.addTableRowsFromXmlDoc.bind(this);\n  }\n\n  componentDidMount() {\n    var rowData = this.state.data;\n    console.log(rowData, 'row');\n    var xmlNodes = rowData.getElementsByTagName(\"Item\");\n    var tableNode = document.getElementById(\"BodyRows\");\n    var theTable = tableNode.parentNode;\n    var newRow, newCell, i, j;\n\n    for (i = 0; i < xmlNodes.length; i++) {\n      newRow = tableNode.insertRow(i);\n      newRow.className = i % 2 ? \"OddRow\" : \"EvenRow\";\n\n      for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n        newCell = newRow.insertCell(newRow.cells.length);\n\n        if (xmlNodes[i].childNodes[j].firstChild) {\n          newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n        }\n      }\n    }\n\n    theTable.appendChild(tableNode);\n    console.log(theTable, 'out');\n  } // removeWhitespace = function (xml) {\n  //     console.log(xml, 'docxml');\n  //     var loopIndex;\n  //     for (loopIndex = 0; loopIndex < xml.childNodes.length; loopIndex++) {\n  //         var currentNode = xml.childNodes[loopIndex];\n  //         if (currentNode.nodeType == 1) {\n  //             this.removeWhitespace(currentNode);\n  //         }\n  //         if (!(/\\S/.test(currentNode.nodeValue)) && (currentNode.nodeType == 3)) {\n  //             xml.removeChild(xml.childNodes[loopIndex--]);\n  //         }\n  //     }\n  // }\n\n\n  render() {\n    var newdata = this.state.data;\n    return /*#__PURE__*/React.createElement(\"table\", {\n      id: \"MainTable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      id: \"BodyRows\",\n      ref: \"BodyRows\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Tablexml;","map":{"version":3,"sources":["/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx"],"names":["React","Component","Tablexml","constructor","props","addTableRowsFromXmlDoc","xmlNodes","tableNode","console","log","showResult","xmlDoc","document","getElementById","state","data","bind","componentDidMount","rowData","getElementsByTagName","theTable","parentNode","newRow","newCell","i","j","length","insertRow","className","childNodes","insertCell","cells","firstChild","innerHTML","nodeValue","appendChild","render","newdata"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass Tablexml extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data,\n        };\n\n        this.showResult = this.showResult.bind(this);\n        this.addTableRowsFromXmlDoc = this.addTableRowsFromXmlDoc.bind(this);\n    }\n\n    componentDidMount() {\n        var rowData = this.state.data;\n        console.log(rowData, 'row');\n        var xmlNodes = rowData.getElementsByTagName(\"Item\");\n        var tableNode = document.getElementById(\"BodyRows\");\n        var theTable = tableNode.parentNode;\n        var newRow, newCell, i, j;\n        for (i = 0; i < xmlNodes.length; i++) {\n            newRow = tableNode.insertRow(i);\n            newRow.className = (i % 2) ? \"OddRow\" : \"EvenRow\";\n            for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n                newCell = newRow.insertCell(newRow.cells.length);\n                if (xmlNodes[i].childNodes[j].firstChild) {\n                    newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n                }\n            }\n        }\n        theTable.appendChild(tableNode);\n        console.log(theTable, 'out');\n\n    }\n\n    // removeWhitespace = function (xml) {\n    //     console.log(xml, 'docxml');\n    //     var loopIndex;\n    //     for (loopIndex = 0; loopIndex < xml.childNodes.length; loopIndex++) {\n    //         var currentNode = xml.childNodes[loopIndex];\n    //         if (currentNode.nodeType == 1) {\n    //             this.removeWhitespace(currentNode);\n    //         }\n    //         if (!(/\\S/.test(currentNode.nodeValue)) && (currentNode.nodeType == 3)) {\n    //             xml.removeChild(xml.childNodes[loopIndex--]);\n    //         }\n    //     }\n    // }\n\n    addTableRowsFromXmlDoc = function (xmlNodes, tableNode) {\n\n        console.log(tableNode, 'table');\n        // var theTable = tableNode.parentNode;\n\n        // var newRow, newCell, i, j;\n        // console.log(\"Number of nodes: \" + xmlNodes.length);\n        // for (i = 0; i < xmlNodes.length; i++) {\n        //     newRow = tableNode.insertRow(i);\n        //     newRow.className = (i % 2) ? \"OddRow\" : \"EvenRow\";\n        //     for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n        //         newCell = newRow.insertCell(newRow.cells.length);\n        //         if (xmlNodes[i].childNodes[j].firstChild) {\n        //             newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n        //         } else {\n        //             newCell.innerHTML = \"-\";\n        //         }\n        //         console.log(\"cell: \" + newCell);\n        //     }\n        // }\n        // theTable.appendChild(tableNode);\n    }\n\n    showResult = function (xmlDoc) {\n        // this.removeWhitespace(xmlDoc);\n        // const r = <tbody id=\"BodyRows\"></tbody>\n        // var outputResult = document.getElementById(\"BodyRows\");\n        // console.log(outputResult, 'output');\n\n        return (\n            <tbody id=\"BodyRows\">\n                {\n\n                    this.addTableRowsFromXmlDoc(xmlDoc, document.getElementById(\"BodyRows\"))\n                    // for(i = 0; i <xmlNodes.length; {\n                    // newRow = tableNode.insertRow(i);\n                    //     newRow.className = (i % 2) ? \"OddRow\" : \"EvenRow\";\n                    //     for (j = 0; j < xmlNodes[{\n                    // newCell = newRow.insertCell(newRow.cells.length);\n                    //         if (xmlNodes[i].childNodes[j].firstChild) {\n                    // newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n                    //         } else {\n                    // newCell.innerHTML = \"-\";\n                    //         }\n                    //         console.log(\"cell: \" + newCell);\n                    //     }\n                    // }\n                    // theTable.appendChild(tableNode)\n                }\n            </tbody>\n        );\n\n\n        // let rows = [];\n        // var xmlNodes = xmlDoc.getElementsByTagName(\"Item\");\n        // var i, j;\n        // for (i = 0; i < xmlNodes.length; i++) {\n        //     let rowID = `row${i}`;\n        //     let cell = [];\n        //     for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n        //         let cellID = `cell${i}-${j}`;\n        //         if (xmlNodes[i].childNodes[j].firstChild) {\n        //             cell.push(<td key={cellID} id={cellID}>{xmlNodes[i].childNodes[j].firstChild.nodeValue}</td>)\n        //         }\n        //     }\n        //     rows.push(<tr key={i} id={rowID}>{cell}</tr>)\n        // }\n\n        // return rows;\n    }\n\n    render() {\n        var newdata = this.state.data;\n\n        return (\n            <table id=\"MainTable\">\n                <tbody id=\"BodyRows\" ref=\"BodyRows\">\n                    {/* {this.showResult(newdata)} */}\n                </tbody>\n\n            </table>\n        );\n    }\n}\n\nexport default Tablexml;"]},"metadata":{},"sourceType":"module"}