{"ast":null,"code":"var _jsxFileName = \"/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx\";\nimport React, { Component } from 'react';\n\nclass Tablexml extends Component {\n  constructor(props) {\n    super(props);\n    var rowData = props.getElementsByTagName(\"Item\");\n    console.log(rowData, 'rowdata'); // this.state = {\n    //     data: this.props.data,\n    //     searchString: ''\n    // };\n    // this.getHeader = this.getHeader.bind(this);\n    // this.getRowsData = this.getRowsData.bind(this);\n    // this.getKeys = this.getKeys.bind(this);\n    // this.onSort = this.onSort.bind(this);\n    // this.handleChange = this.handleChange.bind(this);\n  } // getKeys = function () {\n  //     return Object.keys(this.props.data[0]);\n  // }\n  // onSort(event, sortKey) {\n  //     const data = this.state.data;\n  //     data.sort((a, b) => {\n  //         if (a[sortKey.key] < b[sortKey.key]) {\n  //             return -1;\n  //         }\n  //         if (a[sortKey.key] > b[sortKey.key]) {\n  //             return 1;\n  //         }\n  //         return 0;\n  //     });\n  //     this.setState({ data });\n  // }\n  // getHeader = function () {\n  //     var keys = this.getKeys();\n  //     return keys.map((key, index) => {\n  //         return <th onClick={e => this.onSort(e, { key })} key={key}>{key.toUpperCase()}</th>\n  //     })\n  // }\n  // getRowsData = function (newdata) {\n  //     var items = newdata;\n  //     var keys = this.getKeys();\n  //     return items.map((row, index) => {\n  //         return <tr key={index}><RenderRow key={index} data={row} keys={keys} /></tr>\n  //     })\n  // }\n  // handleChange = event => {\n  //     this.setState({ searchString: event.target.value });\n  // };\n\n\n  render() {\n    // var newdata = this.state.data;\n    // let searchString = this.state.searchString.trim().toLowerCase();\n    // if (searchString.length > 0) {\n    //     var found = [];\n    //     newdata.forEach(record => {\n    //         Object.keys(record).forEach(function (key) {\n    //             if (typeof record[key] == 'string') {\n    //                 if (record[key].toLowerCase().match(searchString)) {\n    //                     found.push(record)\n    //                 }\n    //             }\n    //         })\n    //     });\n    //     newdata = found;\n    // }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    });\n  }\n\n} // const RenderRow = (props) => {\n//     return props.keys.map((key, index) => {\n//         return <td key={props.data[key]}>{props.data[key]}</td>\n//     })\n// }\n\n\nexport default Tablexml;","map":{"version":3,"sources":["/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx"],"names":["React","Component","Tablexml","constructor","props","rowData","getElementsByTagName","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAE7BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,QAAIC,OAAO,GAAGD,KAAK,CAACE,oBAAN,CAA2B,MAA3B,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqB,SAArB,EAHe,CAIf;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACH,GAhB4B,CAkB7B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AAEAI,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAMH;;AA9E4B,C,CAiFjC;AACA;AACA;AACA;AACA;;;AAEA,eAAeP,QAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Tablexml extends Component {\n\n    constructor(props) {\n        super(props);\n        var rowData = props.getElementsByTagName(\"Item\");\n        console.log(rowData, 'rowdata');\n        // this.state = {\n        //     data: this.props.data,\n        //     searchString: ''\n        // };\n\n        // this.getHeader = this.getHeader.bind(this);\n        // this.getRowsData = this.getRowsData.bind(this);\n        // this.getKeys = this.getKeys.bind(this);\n        // this.onSort = this.onSort.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    // getKeys = function () {\n    //     return Object.keys(this.props.data[0]);\n    // }\n\n    // onSort(event, sortKey) {\n    //     const data = this.state.data;\n    //     data.sort((a, b) => {\n    //         if (a[sortKey.key] < b[sortKey.key]) {\n    //             return -1;\n    //         }\n    //         if (a[sortKey.key] > b[sortKey.key]) {\n    //             return 1;\n    //         }\n    //         return 0;\n    //     });\n    //     this.setState({ data });\n    // }\n\n    // getHeader = function () {\n    //     var keys = this.getKeys();\n    //     return keys.map((key, index) => {\n    //         return <th onClick={e => this.onSort(e, { key })} key={key}>{key.toUpperCase()}</th>\n    //     })\n    // }\n\n    // getRowsData = function (newdata) {\n    //     var items = newdata;\n    //     var keys = this.getKeys();\n    //     return items.map((row, index) => {\n    //         return <tr key={index}><RenderRow key={index} data={row} keys={keys} /></tr>\n    //     })\n    // }\n\n\n    // handleChange = event => {\n    //     this.setState({ searchString: event.target.value });\n    // };\n\n    render() {\n        // var newdata = this.state.data;\n        // let searchString = this.state.searchString.trim().toLowerCase();\n        // if (searchString.length > 0) {\n        //     var found = [];\n        //     newdata.forEach(record => {\n        //         Object.keys(record).forEach(function (key) {\n        //             if (typeof record[key] == 'string') {\n        //                 if (record[key].toLowerCase().match(searchString)) {\n        //                     found.push(record)\n        //                 }\n        //             }\n        //         })\n        //     });\n        //     newdata = found;\n        // }\n        return (\n            <div>\n\n            </div >\n\n        );\n    }\n}\n\n// const RenderRow = (props) => {\n//     return props.keys.map((key, index) => {\n//         return <td key={props.data[key]}>{props.data[key]}</td>\n//     })\n// }\n\nexport default Tablexml;"]},"metadata":{},"sourceType":"module"}