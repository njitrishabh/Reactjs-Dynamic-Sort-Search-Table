{"ast":null,"code":"var _jsxFileName = \"/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx\";\nimport React, { Component } from 'react';\n\nclass Tablexml extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.props.data\n    };\n  }\n\n  componentDidMount() {\n    let xml = this.state.data;\n    let xmlNodes = xml.getElementsByTagName(\"Item\");\n    let tableNode = document.getElementById(\"BodyRows\");\n    let theTable = tableNode.parentNode;\n    var newRow, newCell, i, j;\n\n    for (i = 0; i < xmlNodes.length; i++) {\n      newRow = tableNode.insertRow(i);\n      newRow.className = i % 2 ? \"OddRow\" : \"EvenRow\";\n\n      for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n        newCell = newRow.insertCell(newRow.cells.length);\n\n        if (xmlNodes[i].childNodes[j].nodeValue !== '') {\n          newCell.innerHTML = xmlNodes[i].childNodes[j].nodeValue;\n        }\n      }\n    }\n\n    theTable.appendChild(tableNode);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"table\", {\n      id: \"MainTable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      id: \"BodyRows\",\n      ref: \"BodyRows\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Tablexml;","map":{"version":3,"sources":["/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx"],"names":["React","Component","Tablexml","constructor","props","state","data","componentDidMount","xml","xmlNodes","getElementsByTagName","tableNode","document","getElementById","theTable","parentNode","newRow","newCell","i","j","length","insertRow","className","childNodes","insertCell","cells","nodeValue","innerHTML","appendChild","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAE7BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,KAAKF,KAAL,CAAWE;AADR,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,GAAG,GAAG,KAAKH,KAAL,CAAWC,IAArB;AACA,QAAIG,QAAQ,GAAGD,GAAG,CAACE,oBAAJ,CAAyB,MAAzB,CAAf;AACA,QAAIC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAhB;AACA,QAAIC,QAAQ,GAAGH,SAAS,CAACI,UAAzB;AACA,QAAIC,MAAJ,EAAYC,OAAZ,EAAqBC,CAArB,EAAwBC,CAAxB;;AACA,SAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGT,QAAQ,CAACW,MAAzB,EAAiCF,CAAC,EAAlC,EAAsC;AAClCF,MAAAA,MAAM,GAAGL,SAAS,CAACU,SAAV,CAAoBH,CAApB,CAAT;AACAF,MAAAA,MAAM,CAACM,SAAP,GAAoBJ,CAAC,GAAG,CAAL,GAAU,QAAV,GAAqB,SAAxC;;AACA,WAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGV,QAAQ,CAACS,CAAD,CAAR,CAAYK,UAAZ,CAAuBH,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAChDF,QAAAA,OAAO,GAAGD,MAAM,CAACQ,UAAP,CAAkBR,MAAM,CAACS,KAAP,CAAaL,MAA/B,CAAV;;AACA,YAAIX,QAAQ,CAACS,CAAD,CAAR,CAAYK,UAAZ,CAAuBJ,CAAvB,EAA0BO,SAA1B,KAAwC,EAA5C,EAAgD;AAC5CT,UAAAA,OAAO,CAACU,SAAR,GAAoBlB,QAAQ,CAACS,CAAD,CAAR,CAAYK,UAAZ,CAAuBJ,CAAvB,EAA0BO,SAA9C;AACH;AAEJ;AACJ;;AACDZ,IAAAA,QAAQ,CAACc,WAAT,CAAqBjB,SAArB;AACH;;AAEDkB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAO,MAAA,EAAE,EAAC,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,EAAE,EAAC,UAAV;AAAqB,MAAA,GAAG,EAAC,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAMH;;AApC4B;;AAuCjC,eAAe3B,QAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Tablexml extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.props.data,\n        };\n    }\n\n    componentDidMount() {\n        let xml = this.state.data;\n        let xmlNodes = xml.getElementsByTagName(\"Item\");\n        let tableNode = document.getElementById(\"BodyRows\");\n        let theTable = tableNode.parentNode;\n        var newRow, newCell, i, j;\n        for (i = 0; i < xmlNodes.length; i++) {\n            newRow = tableNode.insertRow(i);\n            newRow.className = (i % 2) ? \"OddRow\" : \"EvenRow\";\n            for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n                newCell = newRow.insertCell(newRow.cells.length);\n                if (xmlNodes[i].childNodes[j].nodeValue !== '') {\n                    newCell.innerHTML = xmlNodes[i].childNodes[j].nodeValue;\n                }\n\n            }\n        }\n        theTable.appendChild(tableNode);\n    }\n\n    render() {\n        return (\n            <table id=\"MainTable\">\n                <tbody id=\"BodyRows\" ref=\"BodyRows\">\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default Tablexml;"]},"metadata":{},"sourceType":"module"}