{"ast":null,"code":"var _jsxFileName = \"/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx\";\nimport React, { Component } from 'react';\n\nclass Tablexml extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addTableRowsFromXmlDoc = function (xmlNodes, tableNode) {\n      console.log(tableNode, 'table');\n      var theTable = tableNode.parentNode;\n      var newRow, newCell, i, j;\n      console.log(\"Number of nodes: \" + xmlNodes.length);\n\n      for (i = 0; i < xmlNodes.length; i++) {\n        newRow = tableNode.insertRow(i);\n        newRow.className = i % 2 ? \"OddRow\" : \"EvenRow\";\n\n        for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n          newCell = newRow.insertCell(newRow.cells.length);\n\n          if (xmlNodes[i].childNodes[j].firstChild) {\n            newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n          } else {\n            newCell.innerHTML = \"-\";\n          }\n\n          console.log(\"cell: \" + newCell);\n        }\n      }\n\n      theTable.appendChild(tableNode);\n    };\n\n    this.showResult = function (xmlDoc) {\n      // this.removeWhitespace(xmlDoc);\n      var outputResult = document.getElementById(\"MainTable\");\n      console.log(outputResult, 'output');\n      var rowData = xmlDoc.getElementsByTagName(\"Item\"); //console.log(rowData, 'rowdata');\n      // this.addTableRowsFromXmlDoc(rowData, outputResult);\n    };\n\n    console.log(this.props.data, 'rowdata'); // this.state = {\n    //     data: this.props.data,\n    //     searchString: ''\n    // };\n    // this.getHeader = this.getHeader.bind(this);\n    // this.getRowsData = this.getRowsData.bind(this);\n    // this.getKeys = this.getKeys.bind(this);\n    // this.onSort = this.onSort.bind(this);\n    // this.handleChange = this.handleChange.bind(this);\n  } // removeWhitespace = function (xml) {\n  //     console.log(xml, 'docxml');\n  //     var loopIndex;\n  //     for (loopIndex = 0; loopIndex < xml.childNodes.length; loopIndex++) {\n  //         var currentNode = xml.childNodes[loopIndex];\n  //         if (currentNode.nodeType == 1) {\n  //             this.removeWhitespace(currentNode);\n  //         }\n  //         if (!(/\\S/.test(currentNode.nodeValue)) && (currentNode.nodeType == 3)) {\n  //             xml.removeChild(xml.childNodes[loopIndex--]);\n  //         }\n  //     }\n  // }\n\n\n  // getKeys = function () {\n  //     return Object.keys(this.props.data[0]);\n  // }\n  // onSort(event, sortKey) {\n  //     const data = this.state.data;\n  //     data.sort((a, b) => {\n  //         if (a[sortKey.key] < b[sortKey.key]) {\n  //             return -1;\n  //         }\n  //         if (a[sortKey.key] > b[sortKey.key]) {\n  //             return 1;\n  //         }\n  //         return 0;\n  //     });\n  //     this.setState({ data });\n  // }\n  // getHeader = function () {\n  //     var keys = this.getKeys();\n  //     return keys.map((key, index) => {\n  //         return <th onClick={e => this.onSort(e, { key })} key={key}>{key.toUpperCase()}</th>\n  //     })\n  // }\n  // getRowsData = function (newdata) {\n  //     var items = newdata;\n  //     var keys = this.getKeys();\n  //     return items.map((row, index) => {\n  //         return <tr key={index}><RenderRow key={index} data={row} keys={keys} /></tr>\n  //     })\n  // }\n  // handleChange = event => {\n  //     this.setState({ searchString: event.target.value });\n  // };\n  render() {\n    // var newdata = this.state.data;\n    // let searchString = this.state.searchString.trim().toLowerCase();\n    // if (searchString.length > 0) {\n    //     var found = [];\n    //     newdata.forEach(record => {\n    //         Object.keys(record).forEach(function (key) {\n    //             if (typeof record[key] == 'string') {\n    //                 if (record[key].toLowerCase().match(searchString)) {\n    //                     found.push(record)\n    //                 }\n    //             }\n    //         })\n    //     });\n    //     newdata = found;\n    // }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    });\n  }\n\n} // const RenderRow = (props) => {\n//     return props.keys.map((key, index) => {\n//         return <td key={props.data[key]}>{props.data[key]}</td>\n//     })\n// }\n\n\nexport default Tablexml;","map":{"version":3,"sources":["/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx"],"names":["React","Component","Tablexml","constructor","props","addTableRowsFromXmlDoc","xmlNodes","tableNode","console","log","theTable","parentNode","newRow","newCell","i","j","length","insertRow","className","childNodes","insertCell","cells","firstChild","innerHTML","nodeValue","appendChild","showResult","xmlDoc","outputResult","document","getElementById","rowData","getElementsByTagName","data","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAE7BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA6BnBC,sBA7BmB,GA6BM,UAAUC,QAAV,EAAoBC,SAApB,EAA+B;AACpDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAAuB,OAAvB;AACA,UAAIG,QAAQ,GAAGH,SAAS,CAACI,UAAzB;AACA,UAAIC,MAAJ,EAAYC,OAAZ,EAAqBC,CAArB,EAAwBC,CAAxB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBH,QAAQ,CAACU,MAA3C;;AACA,WAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGR,QAAQ,CAACU,MAAzB,EAAiCF,CAAC,EAAlC,EAAsC;AAClCF,QAAAA,MAAM,GAAGL,SAAS,CAACU,SAAV,CAAoBH,CAApB,CAAT;AACAF,QAAAA,MAAM,CAACM,SAAP,GAAoBJ,CAAC,GAAG,CAAL,GAAU,QAAV,GAAqB,SAAxC;;AACA,aAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGT,QAAQ,CAACQ,CAAD,CAAR,CAAYK,UAAZ,CAAuBH,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAChDF,UAAAA,OAAO,GAAGD,MAAM,CAACQ,UAAP,CAAkBR,MAAM,CAACS,KAAP,CAAaL,MAA/B,CAAV;;AACA,cAAIV,QAAQ,CAACQ,CAAD,CAAR,CAAYK,UAAZ,CAAuBJ,CAAvB,EAA0BO,UAA9B,EAA0C;AACtCT,YAAAA,OAAO,CAACU,SAAR,GAAoBjB,QAAQ,CAACQ,CAAD,CAAR,CAAYK,UAAZ,CAAuBJ,CAAvB,EAA0BO,UAA1B,CAAqCE,SAAzD;AACH,WAFD,MAEO;AACHX,YAAAA,OAAO,CAACU,SAAR,GAAoB,GAApB;AACH;;AACDf,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAWI,OAAvB;AACH;AACJ;;AACDH,MAAAA,QAAQ,CAACe,WAAT,CAAqBlB,SAArB;AACH,KAhDkB;;AAAA,SAkDnBmB,UAlDmB,GAkDN,UAAUC,MAAV,EAAkB;AAC3B;AACA,UAAIC,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAnB;AACAtB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,YAAZ,EAA0B,QAA1B;AACA,UAAIG,OAAO,GAAGJ,MAAM,CAACK,oBAAP,CAA4B,MAA5B,CAAd,CAJ2B,CAK3B;AACA;AACH,KAzDkB;;AAEfxB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAW6B,IAAvB,EAA6B,SAA7B,EAFe,CAGf;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACH,GAf4B,CAiB7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAgCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAMH;;AAzH4B,C,CA4HjC;AACA;AACA;AACA;AACA;;;AAEA,eAAehC,QAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Tablexml extends Component {\n\n    constructor(props) {\n        super(props);\n        console.log(this.props.data, 'rowdata');\n        // this.state = {\n        //     data: this.props.data,\n        //     searchString: ''\n        // };\n\n        // this.getHeader = this.getHeader.bind(this);\n        // this.getRowsData = this.getRowsData.bind(this);\n        // this.getKeys = this.getKeys.bind(this);\n        // this.onSort = this.onSort.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    // removeWhitespace = function (xml) {\n    //     console.log(xml, 'docxml');\n    //     var loopIndex;\n    //     for (loopIndex = 0; loopIndex < xml.childNodes.length; loopIndex++) {\n    //         var currentNode = xml.childNodes[loopIndex];\n    //         if (currentNode.nodeType == 1) {\n    //             this.removeWhitespace(currentNode);\n    //         }\n    //         if (!(/\\S/.test(currentNode.nodeValue)) && (currentNode.nodeType == 3)) {\n    //             xml.removeChild(xml.childNodes[loopIndex--]);\n    //         }\n    //     }\n    // }\n\n    addTableRowsFromXmlDoc = function (xmlNodes, tableNode) {\n        console.log(tableNode, 'table');\n        var theTable = tableNode.parentNode;\n        var newRow, newCell, i, j;\n        console.log(\"Number of nodes: \" + xmlNodes.length);\n        for (i = 0; i < xmlNodes.length; i++) {\n            newRow = tableNode.insertRow(i);\n            newRow.className = (i % 2) ? \"OddRow\" : \"EvenRow\";\n            for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n                newCell = newRow.insertCell(newRow.cells.length);\n                if (xmlNodes[i].childNodes[j].firstChild) {\n                    newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n                } else {\n                    newCell.innerHTML = \"-\";\n                }\n                console.log(\"cell: \" + newCell);\n            }\n        }\n        theTable.appendChild(tableNode);\n    }\n\n    showResult = function (xmlDoc) {\n        // this.removeWhitespace(xmlDoc);\n        var outputResult = document.getElementById(\"MainTable\");\n        console.log(outputResult, 'output');\n        var rowData = xmlDoc.getElementsByTagName(\"Item\");\n        //console.log(rowData, 'rowdata');\n        // this.addTableRowsFromXmlDoc(rowData, outputResult);\n    }\n\n    // getKeys = function () {\n    //     return Object.keys(this.props.data[0]);\n    // }\n\n    // onSort(event, sortKey) {\n    //     const data = this.state.data;\n    //     data.sort((a, b) => {\n    //         if (a[sortKey.key] < b[sortKey.key]) {\n    //             return -1;\n    //         }\n    //         if (a[sortKey.key] > b[sortKey.key]) {\n    //             return 1;\n    //         }\n    //         return 0;\n    //     });\n    //     this.setState({ data });\n    // }\n\n    // getHeader = function () {\n    //     var keys = this.getKeys();\n    //     return keys.map((key, index) => {\n    //         return <th onClick={e => this.onSort(e, { key })} key={key}>{key.toUpperCase()}</th>\n    //     })\n    // }\n\n    // getRowsData = function (newdata) {\n    //     var items = newdata;\n    //     var keys = this.getKeys();\n    //     return items.map((row, index) => {\n    //         return <tr key={index}><RenderRow key={index} data={row} keys={keys} /></tr>\n    //     })\n    // }\n\n\n    // handleChange = event => {\n    //     this.setState({ searchString: event.target.value });\n    // };\n\n    render() {\n        // var newdata = this.state.data;\n        // let searchString = this.state.searchString.trim().toLowerCase();\n        // if (searchString.length > 0) {\n        //     var found = [];\n        //     newdata.forEach(record => {\n        //         Object.keys(record).forEach(function (key) {\n        //             if (typeof record[key] == 'string') {\n        //                 if (record[key].toLowerCase().match(searchString)) {\n        //                     found.push(record)\n        //                 }\n        //             }\n        //         })\n        //     });\n        //     newdata = found;\n        // }\n        return (\n            <div>\n\n            </div >\n\n        );\n    }\n}\n\n// const RenderRow = (props) => {\n//     return props.keys.map((key, index) => {\n//         return <td key={props.data[key]}>{props.data[key]}</td>\n//     })\n// }\n\nexport default Tablexml;"]},"metadata":{},"sourceType":"module"}