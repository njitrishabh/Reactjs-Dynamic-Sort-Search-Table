{"ast":null,"code":"var _jsxFileName = \"/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/App.js\";\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getkeys = function () {\n      return Object.keys(this.props.data[0]);\n    };\n\n    this.getHeader = function () {\n      var keys = this.getKeys();\n      return keys.map((key, index) => {\n        return /*#__PURE__*/React.createElement(\"th\", {\n          key: key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 14\n          }\n        }, key.toUpperCase());\n      });\n    };\n\n    this.getRowsData = function () {\n      var items = this.props.data;\n      var keys = this.getKeys();\n      return items.map((row, index) => {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 14\n          }\n        }, /*#__PURE__*/React.createElement(RenderRow, {\n          key: index,\n          data: row,\n          keys: keys,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 30\n          }\n        }));\n      });\n    };\n\n    this.state = {\n      items: [],\n      isLoaded: false\n    };\n    this.getHeader = this.getHeader.bind(this);\n    this.getRowsData = this.getRowsData.bind(this);\n    this.getKeys = this.getKeys.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:9000/crossref/works').then(res => res.json()).then(data => {\n      this.setState({\n        isLoaded: true,\n        items: data\n      });\n    });\n  }\n\n  render() {\n    var isLoaded = this.state.isLoaded;\n    var items = this.state.items;\n\n    if (!isLoaded) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    } else {\n      console.log(items.message, 'message items');\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, this.getHeader())), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }\n      }, this.getRowsData()))));\n    }\n  }\n\n}\n\nconst RenderRow = props => {\n  return props.keys.map((key, index) => {\n    return /*#__PURE__*/React.createElement(\"td\", {\n      key: props.data[key],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 12\n      }\n    }, props.data[key]);\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/App.js"],"names":["React","Component","App","constructor","props","getkeys","Object","keys","data","getHeader","getKeys","map","key","index","toUpperCase","getRowsData","items","row","state","isLoaded","bind","componentDidMount","fetch","then","res","json","setState","render","console","log","message","RenderRow"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n    };\n\n    this.getHeader = this.getHeader.bind(this);\n    this.getRowsData = this.getRowsData.bind(this);\n    this.getKeys = this.getKeys.bind(this);\n  }\n\n  getkeys = function () {\n    return Object.keys(this.props.data[0]);\n  }\n  getHeader = function () {\n    var keys = this.getKeys();\n    return keys.map((key, index) => {\n      return <th key={key}>{key.toUpperCase()}</th>\n    })\n  }\n  getRowsData = function () {\n    var items = this.props.data;\n    var keys = this.getKeys();\n    return items.map((row, index) => {\n      return <tr key={index}><RenderRow key={index} data={row} keys={keys} /></tr>\n    })\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:9000/crossref/works')\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          isLoaded: true,\n          items: data,\n        })\n      });\n  }\n\n  render() {\n\n    var isLoaded = this.state.isLoaded;\n    var items = this.state.items;\n\n    if (!isLoaded) {\n      return <div>Loading...</div>;\n    }\n\n    else {\n      console.log(items.message, 'message items');\n      return (\n        <div className=\"App\">\n          <div>\n            <table>\n              <thead>\n                <tr>{this.getHeader()}</tr>\n              </thead>\n              <tbody>\n                {this.getRowsData()}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      );\n    }\n\n  }\n}\n\nconst RenderRow = (props) => {\n  return props.keys.map((key, index) => {\n    return <td key={props.data[key]}>{props.data[key]}</td>\n  })\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}