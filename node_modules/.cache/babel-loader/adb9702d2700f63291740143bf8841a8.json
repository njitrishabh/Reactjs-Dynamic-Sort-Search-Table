{"ast":null,"code":"var _jsxFileName = \"/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx\";\nimport React, { Component } from 'react';\n\nclass Tablexml extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addTableRowsFromXmlDoc = function (xmlNodes, tableNode) {\n      console.log(tableNode, 'table');\n      var theTable = tableNode.parentNode;\n      var newRow, newCell, i, j;\n      console.log(\"Number of nodes: \" + xmlNodes.length);\n\n      for (i = 0; i < xmlNodes.length; i++) {\n        newRow = tableNode.insertRow(i);\n        newRow.className = i % 2 ? \"OddRow\" : \"EvenRow\";\n\n        for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n          newCell = newRow.insertCell(newRow.cells.length);\n\n          if (xmlNodes[i].childNodes[j].firstChild) {\n            newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n          } else {\n            newCell.innerHTML = \"-\";\n          }\n\n          console.log(\"cell: \" + newCell);\n        }\n      }\n\n      theTable.appendChild(tableNode);\n    };\n\n    this.showResult = function (xmlDoc) {\n      // this.removeWhitespace(xmlDoc);\n      var outputResult = document.getElementById(\"MainTable\");\n      console.log(outputResult, 'output');\n      var rowData = xmlDoc.getElementsByTagName(\"Item\"); //console.log(rowData, 'rowdata');\n      // this.addTableRowsFromXmlDoc(rowData, outputResult);\n    };\n\n    console.log(this.props.data, 'rowdata');\n    this.state = {\n      data: this.props.data\n    }; // this.getHeader = this.getHeader.bind(this);\n    // this.getRowsData = this.getRowsData.bind(this);\n    // this.getKeys = this.getKeys.bind(this);\n    // this.onSort = this.onSort.bind(this);\n    // this.handleChange = this.handleChange.bind(this);\n  } // removeWhitespace = function (xml) {\n  //     console.log(xml, 'docxml');\n  //     var loopIndex;\n  //     for (loopIndex = 0; loopIndex < xml.childNodes.length; loopIndex++) {\n  //         var currentNode = xml.childNodes[loopIndex];\n  //         if (currentNode.nodeType == 1) {\n  //             this.removeWhitespace(currentNode);\n  //         }\n  //         if (!(/\\S/.test(currentNode.nodeValue)) && (currentNode.nodeType == 3)) {\n  //             xml.removeChild(xml.childNodes[loopIndex--]);\n  //         }\n  //     }\n  // }\n\n\n  render() {\n    var newdata = this.state.data;\n    this.showResult(newdata);\n    return /*#__PURE__*/React.createElement(\"table\", {\n      id: \"MainTable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      id: \"BodyRows\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Tablexml;","map":{"version":3,"sources":["/Users/rishabh/rishabhcode/ReactJS/frontend-redis-app/src/components/Tablexml.jsx"],"names":["React","Component","Tablexml","constructor","props","addTableRowsFromXmlDoc","xmlNodes","tableNode","console","log","theTable","parentNode","newRow","newCell","i","j","length","insertRow","className","childNodes","insertCell","cells","firstChild","innerHTML","nodeValue","appendChild","showResult","xmlDoc","outputResult","document","getElementById","rowData","getElementsByTagName","data","state","render","newdata"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAE7BE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA4BnBC,sBA5BmB,GA4BM,UAAUC,QAAV,EAAoBC,SAApB,EAA+B;AACpDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAAuB,OAAvB;AACA,UAAIG,QAAQ,GAAGH,SAAS,CAACI,UAAzB;AACA,UAAIC,MAAJ,EAAYC,OAAZ,EAAqBC,CAArB,EAAwBC,CAAxB;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBH,QAAQ,CAACU,MAA3C;;AACA,WAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGR,QAAQ,CAACU,MAAzB,EAAiCF,CAAC,EAAlC,EAAsC;AAClCF,QAAAA,MAAM,GAAGL,SAAS,CAACU,SAAV,CAAoBH,CAApB,CAAT;AACAF,QAAAA,MAAM,CAACM,SAAP,GAAoBJ,CAAC,GAAG,CAAL,GAAU,QAAV,GAAqB,SAAxC;;AACA,aAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGT,QAAQ,CAACQ,CAAD,CAAR,CAAYK,UAAZ,CAAuBH,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAChDF,UAAAA,OAAO,GAAGD,MAAM,CAACQ,UAAP,CAAkBR,MAAM,CAACS,KAAP,CAAaL,MAA/B,CAAV;;AACA,cAAIV,QAAQ,CAACQ,CAAD,CAAR,CAAYK,UAAZ,CAAuBJ,CAAvB,EAA0BO,UAA9B,EAA0C;AACtCT,YAAAA,OAAO,CAACU,SAAR,GAAoBjB,QAAQ,CAACQ,CAAD,CAAR,CAAYK,UAAZ,CAAuBJ,CAAvB,EAA0BO,UAA1B,CAAqCE,SAAzD;AACH,WAFD,MAEO;AACHX,YAAAA,OAAO,CAACU,SAAR,GAAoB,GAApB;AACH;;AACDf,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAWI,OAAvB;AACH;AACJ;;AACDH,MAAAA,QAAQ,CAACe,WAAT,CAAqBlB,SAArB;AACH,KA/CkB;;AAAA,SAiDnBmB,UAjDmB,GAiDN,UAAUC,MAAV,EAAkB;AAC3B;AACA,UAAIC,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAnB;AACAtB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,YAAZ,EAA0B,QAA1B;AACA,UAAIG,OAAO,GAAGJ,MAAM,CAACK,oBAAP,CAA4B,MAA5B,CAAd,CAJ2B,CAK3B;AACA;AACH,KAxDkB;;AAEfxB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAW6B,IAAvB,EAA6B,SAA7B;AACA,SAAKC,KAAL,GAAa;AACTD,MAAAA,IAAI,EAAE,KAAK7B,KAAL,CAAW6B;AADR,KAAb,CAHe,CAOf;AACA;AACA;AACA;AACA;AACH,GAd4B,CAgB7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAgCAE,EAAAA,MAAM,GAAG;AACL,QAAIC,OAAO,GAAG,KAAKF,KAAL,CAAWD,IAAzB;AACA,SAAKP,UAAL,CAAgBU,OAAhB;AAEA,wBACI;AAAO,MAAA,EAAE,EAAC,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAO,MAAA,EAAE,EAAC,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAMH;;AAtE4B;;AAyEjC,eAAelC,QAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Tablexml extends Component {\n\n    constructor(props) {\n        super(props);\n        console.log(this.props.data, 'rowdata');\n        this.state = {\n            data: this.props.data,\n        };\n\n        // this.getHeader = this.getHeader.bind(this);\n        // this.getRowsData = this.getRowsData.bind(this);\n        // this.getKeys = this.getKeys.bind(this);\n        // this.onSort = this.onSort.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n    // removeWhitespace = function (xml) {\n    //     console.log(xml, 'docxml');\n    //     var loopIndex;\n    //     for (loopIndex = 0; loopIndex < xml.childNodes.length; loopIndex++) {\n    //         var currentNode = xml.childNodes[loopIndex];\n    //         if (currentNode.nodeType == 1) {\n    //             this.removeWhitespace(currentNode);\n    //         }\n    //         if (!(/\\S/.test(currentNode.nodeValue)) && (currentNode.nodeType == 3)) {\n    //             xml.removeChild(xml.childNodes[loopIndex--]);\n    //         }\n    //     }\n    // }\n\n    addTableRowsFromXmlDoc = function (xmlNodes, tableNode) {\n        console.log(tableNode, 'table');\n        var theTable = tableNode.parentNode;\n        var newRow, newCell, i, j;\n        console.log(\"Number of nodes: \" + xmlNodes.length);\n        for (i = 0; i < xmlNodes.length; i++) {\n            newRow = tableNode.insertRow(i);\n            newRow.className = (i % 2) ? \"OddRow\" : \"EvenRow\";\n            for (j = 0; j < xmlNodes[i].childNodes.length; j++) {\n                newCell = newRow.insertCell(newRow.cells.length);\n                if (xmlNodes[i].childNodes[j].firstChild) {\n                    newCell.innerHTML = xmlNodes[i].childNodes[j].firstChild.nodeValue;\n                } else {\n                    newCell.innerHTML = \"-\";\n                }\n                console.log(\"cell: \" + newCell);\n            }\n        }\n        theTable.appendChild(tableNode);\n    }\n\n    showResult = function (xmlDoc) {\n        // this.removeWhitespace(xmlDoc);\n        var outputResult = document.getElementById(\"MainTable\");\n        console.log(outputResult, 'output');\n        var rowData = xmlDoc.getElementsByTagName(\"Item\");\n        //console.log(rowData, 'rowdata');\n        // this.addTableRowsFromXmlDoc(rowData, outputResult);\n    }\n\n    render() {\n        var newdata = this.state.data;\n        this.showResult(newdata);\n\n        return (\n            <table id=\"MainTable\">\n                <tbody id=\"BodyRows\"></tbody>\n            </table>\n\n        );\n    }\n}\n\nexport default Tablexml;"]},"metadata":{},"sourceType":"module"}